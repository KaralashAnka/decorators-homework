#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–¥–∞–Ω–∏–µ 1. –ü—Ä–æ—Å—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä logger
"""

import os
from datetime import datetime
from functools import wraps


def logger(old_function):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª 'main.log':
    - –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    - –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    - –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã–∑–≤–∞–ª–∞—Å—å
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """

    @wraps(old_function)
    def new_function(*args, **kwargs):
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = old_function(*args, **kwargs)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–∑–æ–≤–µ
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        function_name = old_function.__name__

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
        args_str = ', '.join(map(str, args))
        kwargs_str = ', '.join([f'{k}={v}' for k, v in kwargs.items()])

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        all_args = []
        if args_str:
            all_args.append(args_str)
        if kwargs_str:
            all_args.append(kwargs_str)
        args_combined = ', '.join(all_args)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
        log_entry = f"{timestamp} - {function_name}({args_combined}) -> {result}\n"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª main.log
        with open('main.log', 'a', encoding='utf-8') as log_file:
            log_file.write(log_entry)

        return result

    return new_function


def test_1():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ logger"""

    path = 'main.log'
    if os.path.exists(path):
        os.remove(path)

    @logger
    def hello_world():
        return 'Hello World'

    @logger
    def summator(a, b=0):
        return a + b

    @logger
    def div(a, b):
        return a / b

    assert 'Hello World' == hello_world(), "–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'Hello World'"
    result = summator(2, 2)
    assert isinstance(result, int), '–î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ'
    assert result == 4, '2 + 2 = 4'
    result = div(6, 2)
    assert result == 3, '6 / 2 = 3'

    assert os.path.exists(path), '—Ñ–∞–π–ª main.log –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å'

    summator(4.3, b=2.2)
    summator(a=0, b=0)

    with open(path) as log_file:
        log_file_content = log_file.read()

    assert 'summator' in log_file_content, '–¥–æ–ª–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏'
    for item in (4.3, 2.2, 6.5):
        assert str(item) in log_file_content, f'{item} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª'

    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 1 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {path}:")
    print("-" * 50)
    print(log_file_content)


if __name__ == '__main__':
    test_1()