#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
"""

import time
from datetime import datetime
from decorators import logger, performance_monitor, validate_args


@logger('accounting.log')
@performance_monitor
def get_employees():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    print("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("   - –í—ã–±–æ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    print("   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    time.sleep(0.05)

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    employees = [
        {"id": 1, "name": "–ò–≤–∞–Ω–æ–≤ –ò.–ò.", "position": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "salary": 120000.0},
        {"id": 2, "name": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "position": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "salary": 180000.0},
        {"id": 3, "name": "–°–∏–¥–æ—Ä–æ–≤ –°.–°.", "position": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "salary": 150000.0}
    ]

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    print(f"   –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%H:%M:%S')}")

    return employees


@logger('accounting.log')
@validate_args(int)
def get_employee_by_id(employee_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID

    Args:
        employee_id (int): ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    """
    employees = get_employees()

    for employee in employees:
        if employee['id'] == employee_id:
            print(f"üîç –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee['name']}")
            return employee

    print(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None


@logger('accounting.log')
@validate_args(str, str)
def add_employee(name, position):
    """
    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Args:
        name (str): –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        position (str): –î–æ–ª–∂–Ω–æ—Å—Ç—å
    """
    if not name.strip():
        raise ValueError("–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    if not position.strip():
        raise ValueError("–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    new_employee = {
        'id': 4,  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è –±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        'name': name.strip(),
        'position': position.strip(),
        'salary': 100000.0,  # –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
        'hire_date': datetime.now().strftime('%Y-%m-%d')
    }

    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} - {position}")
    return new_employee


@logger('accounting.log')
def update_employee_data():
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    update_info = {
        'updated_at': datetime.now().isoformat(),
        'records_updated': 3,
        'status': 'success'
    }

    print("üîÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    return update_info


@logger('accounting.log')
def get_employees_by_position(position):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Args:
        position (str): –î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    if not isinstance(position, str):
        raise TypeError("–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

    employees = get_employees()
    filtered_employees = [
        emp for emp in employees
        if emp['position'].lower() == position.lower()
    ]

    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(filtered_employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é '{position}'")
    return filtered_employees


@logger('accounting.log')
def calculate_department_stats():
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
    """
    employees = get_employees()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    positions = {}
    total_salary = 0

    for emp in employees:
        pos = emp['position']
        salary = emp.get('salary', 0)

        if pos not in positions:
            positions[pos] = {'count': 0, 'total_salary': 0}

        positions[pos]['count'] += 1
        positions[pos]['total_salary'] += salary
        total_salary += salary

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
    for pos_data in positions.values():
        pos_data['average_salary'] = pos_data['total_salary'] / pos_data['count']

    stats = {
        'total_employees': len(employees),
        'total_salary_budget': total_salary,
        'average_salary': total_salary / len(employees) if employees else 0,
        'positions': positions,
        'generated_at': datetime.now().isoformat()
    }

    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
    return stats