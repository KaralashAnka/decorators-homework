#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
"""

import time
from datetime import datetime
from decorators import logger, performance_monitor, validate_args


@logger('accounting.log')
@performance_monitor
def calculate_salary():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    print("üßÆ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã...")
    print("   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–∫–ª–∞–¥–æ–≤")
    print("   - –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–π –∏ –Ω–∞–¥–±–∞–≤–æ–∫")
    print("   - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–π")
    print(f"   - –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    time.sleep(0.1)

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
    salary_data = {
        'total_employees': 3,
        'total_salary': 450000.0,
        'average_salary': 150000.0
    }

    print("‚úÖ –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return salary_data


@logger('accounting.log')
@validate_args(str, float, float)
def calculate_individual_salary(employee_name, base_salary, bonus_percent=0.0):
    """
    –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

    Args:
        employee_name (str): –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        base_salary (float): –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
        bonus_percent (float): –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–º–∏–∏
    """
    bonus = base_salary * (bonus_percent / 100)
    total_salary = base_salary + bonus

    result = {
        'employee': employee_name,
        'base': base_salary,
        'bonus': bonus,
        'total': total_salary
    }

    print(f"üí∞ {employee_name}: {total_salary:.2f} —Ä—É–±. (–±–∞–∑–æ–≤–∞—è: {base_salary}, –ø—Ä–µ–º–∏—è: {bonus:.2f})")
    return result


@logger('accounting.log')
def get_salary_report():
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    """
    report_data = {
        'report_date': datetime.now().strftime('%Y-%m-%d'),
        'status': 'generated',
        'format': 'detailed'
    }

    print("üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    return report_data


@logger('accounting.log')
def calculate_taxes(gross_salary):
    """
    –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —Å –∑–∞—Ä–ø–ª–∞—Ç—ã

    Args:
        gross_salary (float): –í–∞–ª–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    """
    if not isinstance(gross_salary, (int, float)) or gross_salary < 0:
        raise ValueError("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

    income_tax = gross_salary * 0.13  # 13% –ø–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥
    social_tax = gross_salary * 0.22  # 22% —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–Ω–æ—Å—ã

    net_salary = gross_salary - income_tax
    total_taxes = income_tax + social_tax

    return {
        'gross_salary': gross_salary,
        'income_tax': income_tax,
        'social_tax': social_tax,
        'net_salary': net_salary,
        'total_taxes': total_taxes
    }