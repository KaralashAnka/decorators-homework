#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è"
"""

import os
from datetime import datetime
from decorators import logger
from application.salary import calculate_individual_salary, calculate_taxes
from application.db.people import get_employee_by_id, add_employee


def clean_log_files():
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    log_files = ['accounting.log', 'main_operations.log', 'test.log']
    for file in log_files:
        if os.path.exists(file):
            os.remove(file)
    print("üßπ –õ–æ–≥-—Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")


@logger('test.log')
def test_accounting_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π...")

    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID:")
    employee = get_employee_by_id(1)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {employee}")

    # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    new_emp = add_employee("–ö—É–∑–Ω–µ—Ü–æ–≤ –ö.–ö.", "–î–∏–∑–∞–π–Ω–µ—Ä")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_emp}")

    # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã:")
    salary_result = calculate_individual_salary("–ò–≤–∞–Ω–æ–≤ –ò.–ò.", 120000.0, 15.0)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {salary_result}")

    # –¢–µ—Å—Ç 4: –†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤:")
    tax_result = calculate_taxes(150000.0)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {tax_result}")

    return "–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"


@logger('test.log')
def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ"""
    print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫:")

    try:
        # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
        calculate_individual_salary(123, "invalid", 10.0)  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    except TypeError as e:
        print(f"   –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–∏–ø–∞: {e}")

    try:
        # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        calculate_taxes(-1000)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    except ValueError as e:
        print(f"   –ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")

    return "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"


def show_test_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤"""
    log_files = ['test.log', 'accounting.log']

    for log_file in log_files:
        if os.path.exists(log_file):
            print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {log_file}:")
            print("=" * 60)
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if content:
                    print(content)
                else:
                    print("–§–∞–π–ª –ø—É—Å—Ç–æ–π")
        else:
            print(f"‚ùå –§–∞–π–ª {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤")
    print("=" * 60)

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    clean_log_files()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_result1 = test_accounting_functions()
    print(f"\n‚úÖ {test_result1}")

    test_result2 = test_error_handling()
    print(f"‚úÖ {test_result2}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø:")
    show_test_logs()

    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == '__main__':
    main()